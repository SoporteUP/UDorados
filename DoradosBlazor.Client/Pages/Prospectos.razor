@page "/prospectos"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Reclutador")]

@using DoradosBlazor.Shared
@using DoradosBlazor.Client.Services
@inject IUsuarioService usuarioService
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
@inject SweetAlertService Swal;


<div class="prospectos-kanban-bg">
    <div class="prospectos-header">
        <div>
            <h2 class="prospectos-title">
                Prospectos <span class="prospectos-title-sub">/ CRM visual</span>
            </h2>
            <div class="prospectos-filtros">
                <input class="prospectos-buscador"
                       value="@filtroBusqueda"
                       @oninput="FiltrarProspecto"
                       type="text"
                       placeholder="Buscar nombre, correo, tel..." />


                <select class="prospectos-select" @bind="Txtfiltro">
                    <option value="">Filtro por:</option>
                    @foreach (var FX in listaFiltroX)
                    {
                        <option value="@FX">@FX</option>
                    }
                </select>                
                <button class="prospectos-btn-limpiar" @onclick="LimpiarFiltros" title="Limpiar filtros">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
        </div>
        <button class="prospectos-btn-nuevo" @onclick="NuevoProspecto" title="Crear nuevo prospecto">
            <i class="bi bi-plus-circle"></i> <span>Nuevo</span>
        </button>
    </div>

    @if (mostrarFormulario)
    {
        <div class="prospecto-formulario-bg">
            <div class="modern-card sombra-azul position-relative mt-3 mb-4" style="max-width: 700px; margin: 0 auto;">
                <button class="btn-close btn-cerrar-form" @onclick="CerrarFormulario"></button>
                <div class="modern-card-title mb-4">
                    <i class="bi bi-person-plus"></i> Nuevo Prospecto
                </div>
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="modern-label">Nombre</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sNombre" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Teléfono</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sTelefono" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Celular</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sCelular" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Correo</label>
                        <input type="email" class="form-control modern-input" @bind="PROSPECTODTO.sCorreo" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Localidad</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sLocalidad" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Área de interés</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sAreaInteres" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Escuela de procedencia</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sEscuelaProcedencia" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Ciclo escolar</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sCicloEscolar" />
                    </div>
                    <div class="col-md-4">
                        <label class="modern-label">Edad</label>
                        <input type="number" class="form-control modern-input" @bind="PROSPECTODTO.iEdad" />
                    </div>
                    <div class="col-md-8">
                        <label class="modern-label">Medio por el que se enteró</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sMedioseEntero" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">¿Quién atendió?</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sQuienAtendio" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Estatus</label>
                        <select class="form-control modern-input" @bind="PROSPECTODTO.sEstatus">
                            <option value="">Seleccione</option>
                            @foreach (var est in listaEstatus)
                            {
                                <option value="@est">@est</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Llamó</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sLlamo" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Ubicación</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sUbicacion" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Facebook</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sFacebook" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Nivel Académico Interés</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sNiv_AcademicoInteres" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Base</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sBase" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Turno</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sTurno" />
                    </div>
                    <div class="col-12">
                        <label class="modern-label">Institución o evento</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sInstitu_Evento" />
                    </div>
                </div>

                @if (mostrarBtnModalG)
                {
                    <div class="text-end mt-4">
                        <button class="btn btn-azul px-4 py-2 rounded-pill" @onclick="GuardarProspecto">
                            <i class="bi bi-save"></i> Guardar
                        </button>
                    </div>
                }

                @if (mostrarBtnModalA)
                {
                    <div class="text-end mt-4">
                        <button class="btn btn-dorado px-4 py-2 rounded-pill" @onclick="GuardarProspectoEditado">
                            <i class="bi bi-save"></i> Guardar Cambios
                        </button>
                    </div>
                }
               

            </div>
        </div>
    }
    else
    {
        <div class="prospectos-kanban">
            @foreach (var columna in ColumnasKanban)
            {
                <div class="prospectos-columna"
                @ondragover:preventDefault
                     @ondragover="(e) => OnColumnaDragOver(e)"
                     @ondrop="(e) => OnColumnaDrop(e, columna.Nombre)">
                    <div class="prospectos-columna-header">
                        @columna.Nombre
                        <span class="prospectos-columna-count">@ObtenerCantidadProspectos(columna.Nombre)</span>
                    </div>
                    <div class="prospectos-cards">
                        @if (columna.Prospectos.Count == 0)
                        {
                            <div class="prospectos-alert">No hay prospectos en esta etapa.</div>
                        }
                        @foreach (var prospecto in columna.Prospectos)
                        {
                            <div class="prospectos-card"
                                 draggable="true"
                                 @ondragstart="(e) => OnCardDragStart(e, prospecto.ProspectoID)">
                                <div class="prospectos-card-title">
                                    @prospecto.Nombre
                                    @if (!string.IsNullOrWhiteSpace(prospecto.Estatus))
                                    {
                                        <span class="badge badge-@prospecto.Estatus.ToLower().Replace(" ", "")">
                                            @prospecto.Estatus
                                        </span>
                                    }
                                </div>
                                <div class="prospectos-card-chips">
                                    <span class="chip chip-azul"><i class="bi bi-mortarboard"></i> @prospecto.AreaInteres</span>
                                    <span class="chip chip-localidad"><i class="bi bi-geo-alt"></i> @prospecto.Localidad</span>
                                    <span class="chip chip-cel"><i class="bi bi-telephone"></i> @prospecto.Telefono</span>
                                    @if (!string.IsNullOrWhiteSpace(prospecto.Facebook))
                                    {
                                        <span class="chip chip-facebook" title="Facebook">
                                            <i class="bi bi-facebook"></i> @prospecto.Facebook
                                        </span>
                                    }
                                </div>
                                <div class="prospectos-card-footer">
                                    <button class="btn-kanban-accion" title="Editar" @onclick="() => EditarProspecto(prospecto)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn-kanban-accion" title="Agendar cita">
                                        <i class="bi bi-calendar-event"></i>
                                    </button>
                                    <button class="btn-kanban-accion" title="Ver detalles">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="prospectos-paginacion">
                        @if (PaginaActualPorEstatus.ContainsKey(columna.Nombre) && PaginaActualPorEstatus[columna.Nombre] > 0)
                        {
                            <button class="btn-paginacion btn-paginacion-atras" @onclick="() => CambiarPagina(columna.Nombre, -1)">
                                <i class="bi bi-arrow-left-circle"></i> Atrás
                            </button>
                        }
                        @if ((todosLosProspectos.Count(p => p.Estatus == columna.Nombre) > (PaginaActualPorEstatus.ContainsKey(columna.Nombre) ? PaginaActualPorEstatus[columna.Nombre] + 1 : 1) * PAGE_SIZE))
                        {
                            <button class="btn-paginacion btn-paginacion-mas" @onclick="() => CambiarPagina(columna.Nombre, 1)">
                                Más <i class="bi bi-arrow-right-circle"></i>
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>


<!-- Modals Cargar-->
<div class="modal fade" id="modalCarga" data-bs-backdrop="static" tabindex="-1" aria-labelledby="modalCargaLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow-lg rounded-xl">
            <div class="modal-header bg-blue-500 text-white">
                <h5 class="modal-title" id="modalCargaLabel">Enviar Correo</h5>
            </div>
            <div class="modal-body p-4">


                <h3>Espera un momento mientras se envia el Correo....</h3>

                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%"></div>
                </div>



            </div>
            <div class="modal-footer">
            </div>
        </div>
    </div>
</div>

@code {
    string filtroBusqueda = "";
    string filtroEstatus = "";
    string Txtfiltro = "";
    string filtroArea = "";

    int? idArrastrando = null;

    List<ColumnaKanban> ColumnasKanban = new();
    List<ST_S_ProspecFiltrosDTO> todosLosProspectos = new();

    private bool mostrarFormulario = false;
    private bool mostrarBtnModalG = false;
    private bool mostrarBtnModalA = false;

    List<string> listaFiltroX = new() { "Nombre", "Telefono", "Estatus", "Celular", "Correo", "Localidad", "AreaInteres", "EscuelaProcedencia", "CicloEscolar", "Edad", "MedioseEntero", "Facebook", "CicloEscolar", "Niv_AcademicoInteres", "Base", "Turno", "Institu_Evento" };
    List<string> listaEstatus = new() { "Nuevo", "Contactado", "En seguimiento", "Inscrito", "No interesado" };
    List<string> listaAreas = new();

    const int PAGE_SIZE = 10;
    Dictionary<string, int> PaginaActualPorEstatus = new();

    

    class ColumnaKanban
    {
        public string Nombre { get; set; }
        public List<ST_S_ProspecFiltrosDTO> Prospectos { get; set; } = new();
    }

   

    private ST_IUD_ProspectosDTO PROSPECTODTO = new ST_IUD_ProspectosDTO();

    protected override async Task OnInitializedAsync()
    {
        todosLosProspectos = await usuarioService.ST_S_ProspecFiltros("Nombre", "-", "Nombre", "-");
        listaAreas = todosLosProspectos.Select(x => x.AreaInteres).Distinct().Where(x => !string.IsNullOrWhiteSpace(x)).ToList();
        ConstruirKanban();
    }

    void NuevoProspecto()
    {
        mostrarFormulario = true;
        mostrarBtnModalG = true;
        mostrarBtnModalA = false;
        PROSPECTODTO = new ST_IUD_ProspectosDTO();
    }

    private async Task GuardarProspecto()
    {
        PROSPECTODTO.iTipoOperacion = 1;
        PROSPECTODTO.iProspectoID = 0;
        PROSPECTODTO.iEjecutivoID = 1;
        PROSPECTODTO.sNombre = PROSPECTODTO.sNombre;
        PROSPECTODTO.sTelefono = PROSPECTODTO.sTelefono;
        PROSPECTODTO.sCelular = PROSPECTODTO.sCelular;
        PROSPECTODTO.sCorreo = PROSPECTODTO.sCorreo;
        PROSPECTODTO.sLocalidad = PROSPECTODTO.sLocalidad;
        PROSPECTODTO.sAreaInteres = PROSPECTODTO.sAreaInteres;
        PROSPECTODTO.sEscuelaProcedencia = PROSPECTODTO.sEscuelaProcedencia;
        PROSPECTODTO.sCicloEscolar = PROSPECTODTO.sCicloEscolar;
        PROSPECTODTO.iEdad = PROSPECTODTO.iEdad;
        PROSPECTODTO.sMedioseEntero = PROSPECTODTO.sMedioseEntero;
        PROSPECTODTO.sQuienAtendio = PROSPECTODTO.sQuienAtendio;
        PROSPECTODTO.sEstatus = PROSPECTODTO.sEstatus;
        PROSPECTODTO.sLlamo = PROSPECTODTO.sLlamo;
        PROSPECTODTO.sUbicacion = PROSPECTODTO.sUbicacion;
        PROSPECTODTO.sFacebook = PROSPECTODTO.sFacebook;
        PROSPECTODTO.sNiv_AcademicoInteres = PROSPECTODTO.sNiv_AcademicoInteres;
        PROSPECTODTO.sBase = PROSPECTODTO.sBase;
        PROSPECTODTO.sTurno = PROSPECTODTO.sTurno;
        PROSPECTODTO.sInstitu_Evento = PROSPECTODTO.sInstitu_Evento;

        var loginResponse = await httpClient.PostAsJsonAsync<ST_IUD_ProspectosDTO>($"/api/Usuario/ST_IUD_Prospectos/", PROSPECTODTO);
        if (loginResponse.IsSuccessStatusCode)
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Hecho",
                Text = "Se guardo el prospecto correctamente",
                Icon = SweetAlertIcon.Success
            });

            todosLosProspectos = await usuarioService.ST_S_ProspecFiltros("Nombre", "-", "Nombre", "-");
            ConstruirKanban();
            mostrarFormulario = false;

        }


    }

    void EditarProspecto(ST_S_ProspecFiltrosDTO prospecto)
    {
        mostrarFormulario = true;
        mostrarBtnModalA = true;
        mostrarBtnModalG = false;
        PROSPECTODTO.iProspectoID = prospecto.ProspectoID;
        PROSPECTODTO.iEjecutivoID = prospecto.EjecutivoID;
        PROSPECTODTO.sNombre = prospecto.Nombre;
        PROSPECTODTO.sTelefono = prospecto.Telefono;
        PROSPECTODTO.sCelular = prospecto.Celular;
        PROSPECTODTO.sCorreo = prospecto.Correo;
        PROSPECTODTO.sLocalidad = prospecto.Localidad;
        PROSPECTODTO.sAreaInteres = prospecto.AreaInteres;
        PROSPECTODTO.sEscuelaProcedencia = prospecto.EscuelaProcedencia;
        PROSPECTODTO.sCicloEscolar = prospecto.CicloEscolar;
        PROSPECTODTO.iEdad = prospecto.Edad;
        PROSPECTODTO.sMedioseEntero = prospecto.MedioseEntero;
        PROSPECTODTO.sQuienAtendio = prospecto.QuienAtendio;
        PROSPECTODTO.sEstatus = prospecto.Estatus;
        PROSPECTODTO.sLlamo = prospecto.Llamo;
        PROSPECTODTO.sUbicacion = prospecto.Ubicacion;
        PROSPECTODTO.sFacebook = prospecto.Facebook;
        PROSPECTODTO.sNiv_AcademicoInteres = prospecto.Niv_AcademicoInteres;
        PROSPECTODTO.sBase = prospecto.Base;
        PROSPECTODTO.sTurno = prospecto.Turno;
        PROSPECTODTO.sInstitu_Evento = prospecto.Institu_Evento;
    }

    private async Task GuardarProspectoEditado()
    {
        PROSPECTODTO.iTipoOperacion = 2;
        PROSPECTODTO.iProspectoID = PROSPECTODTO.iProspectoID;
        PROSPECTODTO.iEjecutivoID = PROSPECTODTO.iEjecutivoID;
        PROSPECTODTO.sNombre = PROSPECTODTO.sNombre;
        PROSPECTODTO.sTelefono = PROSPECTODTO.sTelefono;
        PROSPECTODTO.sCelular = PROSPECTODTO.sCelular;
        PROSPECTODTO.sCorreo = PROSPECTODTO.sCorreo;
        PROSPECTODTO.sLocalidad = PROSPECTODTO.sLocalidad;
        PROSPECTODTO.sAreaInteres = PROSPECTODTO.sAreaInteres;
        PROSPECTODTO.sEscuelaProcedencia = PROSPECTODTO.sEscuelaProcedencia;
        PROSPECTODTO.sCicloEscolar = PROSPECTODTO.sCicloEscolar;
        PROSPECTODTO.iEdad = PROSPECTODTO.iEdad;
        PROSPECTODTO.sMedioseEntero = PROSPECTODTO.sMedioseEntero;
        PROSPECTODTO.sQuienAtendio = PROSPECTODTO.sQuienAtendio;
        PROSPECTODTO.sEstatus = PROSPECTODTO.sEstatus;
        PROSPECTODTO.sLlamo = PROSPECTODTO.sLlamo;
        PROSPECTODTO.sUbicacion = PROSPECTODTO.sUbicacion;
        PROSPECTODTO.sFacebook = PROSPECTODTO.sFacebook;
        PROSPECTODTO.sNiv_AcademicoInteres = PROSPECTODTO.sNiv_AcademicoInteres;
        PROSPECTODTO.sBase = PROSPECTODTO.sBase;
        PROSPECTODTO.sTurno = PROSPECTODTO.sTurno;
        PROSPECTODTO.sInstitu_Evento = PROSPECTODTO.sInstitu_Evento;

        var loginResponse = await httpClient.PostAsJsonAsync<ST_IUD_ProspectosDTO>($"/api/Usuario/ST_IUD_Prospectos/", PROSPECTODTO);
        if (loginResponse.IsSuccessStatusCode)
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Hecho",
                    Text = "Se Actualizo el Prospecto",
                    Icon = SweetAlertIcon.Success
                });

            todosLosProspectos = await usuarioService.ST_S_ProspecFiltros("Nombre", "-", "Nombre", "-");
            ConstruirKanban();
            mostrarFormulario = false;
            StateHasChanged();

        }
        else
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "NO se pudo",
                    Icon = SweetAlertIcon.Error
                });
        }


    }


    void CerrarFormulario() => mostrarFormulario = false;




    // ------------------------------------------------------- FUNCIONALIDAD CUANDO SE MUEVE EL PROS -----------------------------------------

    void OnCardDragStart(DragEventArgs e, int idProspecto) => idArrastrando = idProspecto;
    void OnColumnaDragOver(DragEventArgs e) { }

    private async Task OnColumnaDrop(DragEventArgs e, string nuevoEstatus)
    {
        if (idArrastrando != null)
        {
            
            var prospecto = todosLosProspectos.FirstOrDefault(p => p.ProspectoID == idArrastrando);
            if (prospecto != null && prospecto.Estatus != nuevoEstatus)
            {
                prospecto.Estatus = nuevoEstatus;

                PROSPECTODTO.iTipoOperacion = 2;
                PROSPECTODTO.iProspectoID = prospecto.ProspectoID;
                PROSPECTODTO.iEjecutivoID = prospecto.EjecutivoID;
                PROSPECTODTO.sNombre = prospecto.Nombre;
                PROSPECTODTO.sTelefono = prospecto.Telefono;
                PROSPECTODTO.sCelular = prospecto.Celular;
                PROSPECTODTO.sCorreo = prospecto.Correo;
                PROSPECTODTO.sLocalidad = prospecto.Localidad;
                PROSPECTODTO.sAreaInteres = prospecto.AreaInteres;
                PROSPECTODTO.sEscuelaProcedencia = prospecto.EscuelaProcedencia;
                PROSPECTODTO.sCicloEscolar = prospecto.CicloEscolar;
                PROSPECTODTO.iEdad = prospecto.Edad;
                PROSPECTODTO.sMedioseEntero = prospecto.MedioseEntero;
                PROSPECTODTO.sQuienAtendio = prospecto.QuienAtendio;
                PROSPECTODTO.sEstatus = prospecto.Estatus;
                PROSPECTODTO.sLlamo = prospecto.Llamo;
                PROSPECTODTO.sUbicacion = prospecto.Ubicacion;
                PROSPECTODTO.sFacebook = prospecto.Facebook;
                PROSPECTODTO.sNiv_AcademicoInteres = prospecto.Niv_AcademicoInteres;
                PROSPECTODTO.sBase = prospecto.Base;
                PROSPECTODTO.sTurno = prospecto.Turno;
                PROSPECTODTO.sInstitu_Evento = prospecto.Institu_Evento;

                var loginResponse = await httpClient.PostAsJsonAsync<ST_IUD_ProspectosDTO>($"/api/Usuario/ST_IUD_Prospectos/", PROSPECTODTO);
                if (loginResponse.IsSuccessStatusCode)
                {
                   

                }
                else
                {
                  
                    var resultado = await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = "NO se pudo arrastrar",
                            Icon = SweetAlertIcon.Error
                        });
                }


            }

            idArrastrando = null;          
            ConstruirKanban();
            StateHasChanged();
        }
    }

    void ConstruirKanban()
    {
        ColumnasKanban = listaEstatus.Select(status => new ColumnaKanban
            {
                Nombre = status,
                Prospectos = PaginarProspectos(status)
            }).ToList();
    }

    List<ST_S_ProspecFiltrosDTO> FiltrarProspectosPorColumna(string estatus)
    {
        var q = todosLosProspectos.Where(p => p.Estatus == estatus);

        if (!string.IsNullOrWhiteSpace(filtroArea))
            q = q.Where(p => p.AreaInteres == filtroArea);

        if (!string.IsNullOrWhiteSpace(filtroEstatus) && filtroEstatus != estatus)
            return new List<ST_S_ProspecFiltrosDTO>();

        return q.ToList();
    }


    private async Task FiltrarProspecto(ChangeEventArgs e)
    {
        filtroBusqueda = e.Value?.ToString() ?? "";

        if (!string.IsNullOrWhiteSpace(Txtfiltro) && !string.IsNullOrWhiteSpace(filtroBusqueda))
        {
            todosLosProspectos = await usuarioService.ST_S_ProspecFiltros(Txtfiltro, filtroBusqueda, "Nombre", "-");
        }
        else
        {
            todosLosProspectos = await usuarioService.ST_S_ProspecFiltros("Nombre", "-", "Nombre", "-");
        }

        ConstruirKanban();

    }

    void LimpiarFiltros()
    {
        filtroBusqueda = "";
        filtroArea = "";
        filtroEstatus = "";
        Txtfiltro = "";
        ConstruirKanban();
    }

    protected override void OnParametersSet()
    {
        ConstruirKanban();
    }

    void CambiarPagina(string estatus, int cambio)
    {
        if (!PaginaActualPorEstatus.ContainsKey(estatus))
            PaginaActualPorEstatus[estatus] = 0;

        PaginaActualPorEstatus[estatus] += cambio;
        if (PaginaActualPorEstatus[estatus] < 0)
            PaginaActualPorEstatus[estatus] = 0;

        ConstruirKanban();
    }

    List<ST_S_ProspecFiltrosDTO> PaginarProspectos(string estatus)
    {
        var q = todosLosProspectos.Where(p => p.Estatus == estatus);

        if (!string.IsNullOrWhiteSpace(filtroArea))
            q = q.Where(p => p.AreaInteres == filtroArea);

        if (!string.IsNullOrWhiteSpace(filtroEstatus) && filtroEstatus != estatus)
            return new List<ST_S_ProspecFiltrosDTO>();

        int pagina = PaginaActualPorEstatus.ContainsKey(estatus) ? PaginaActualPorEstatus[estatus] : 0;
        return q.Skip(pagina * PAGE_SIZE).Take(PAGE_SIZE).ToList();
    }

    int ObtenerCantidadProspectos(string estatus)
    {
        return todosLosProspectos.Count(p => p.Estatus == estatus);
    }
}

