@page "/prospectos"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Reclutador")]

@using DoradosBlazor.Shared
@using DoradosBlazor.Client.Services
@using DoradosBlazor.Client.Forms
@inject IUsuarioService usuarioService
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
@inject SweetAlertService Swal;
@inject NavigationManager navManager;
@inject SesionUsuario mySesionUsuario

<div class="prospectos-kanban-bg">
    <div class="prospectos-header-glass">
        <div class="prospectos-header-left">
            <div class="prospectos-header-icon">
                <i class="bi bi-kanban"></i> <!-- Cambia el ícono por el tuyo si quieres -->
            </div>
            <div>
                <h2 class="prospectos-header-title">
                    Prospectos <span class="prospectos-header-title-sub">/ CRM visual</span>
                </h2>
                <div class="prospectos-header-subdesc d-none d-md-block">
                    Gestiona y visualiza tus prospectos de forma moderna.
                </div>
            </div>
        </div>

        <div class="prospectos-header-actions">
            <div class="prospectos-header-filtros-group">
                <input class="prospectos-header-buscador"
                       value="@filtroBusqueda"
                       @oninput="FiltrarProspecto"
                       type="text"
                       placeholder="Buscar nombre, correo, tel..." />
                <select class="prospectos-header-select" @bind="Txtfiltro">
                    <option value="">Filtro por:</option>
                    @foreach (var FX in listaFiltroX)
                    {
                        <option value="@FX">@FX</option>
                    }
                </select>
                <button class="prospectos-header-limpiar" @onclick="LimpiarFiltros" title="Limpiar filtros">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>

            <div class="prospectos-header-buttons">
                <button class="prospectos-header-btn-nuevo" @onclick="NuevoProspecto" title="Nuevo prospecto">
                    <i class="bi bi-plus-circle"></i> <span class="d-none d-md-inline">Nuevo</span>
                </button>
                <button class="prospectos-header-btn-calendar" @onclick="NavegarACalendarioE" title="Ver calendario">
                    <i class="bi bi-calendar-week"></i> <span class="d-none d-md-inline">Calendario</span>
                </button>
            </div>
        </div>
    </div>

    @if (mostrarFormulario)
    {
        <div class="prospecto-formulario-bg">
            <div class="modern-card sombra-azul position-relative mt-3 mb-4" style="max-width: 700px; margin: 0 auto;">
                <button class="btn-close btn-cerrar-form" @onclick="CerrarFormulario"></button>
                <div class="modern-card-title mb-4">
                    <i class="bi bi-person-plus"></i> Nuevo Prospecto
                </div>
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="modern-label">Nombre</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sNombre" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Teléfono</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sTelefono" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Celular</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sCelular" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Correo</label>
                        <input type="email" class="form-control modern-input" @bind="PROSPECTODTO.sCorreo" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Localidad</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sLocalidad" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Área de interés</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sAreaInteres" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Escuela de procedencia</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sEscuelaProcedencia" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Ciclo escolar</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sCicloEscolar" />
                    </div>
                    <div class="col-md-4">
                        <label class="modern-label">Edad</label>
                        <input type="number" class="form-control modern-input" @bind="PROSPECTODTO.iEdad" />
                    </div>
                    <div class="col-md-8">
                        <label class="modern-label">Medio por el que se enteró</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sMedioseEntero" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">¿Quién atendió?</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sQuienAtendio" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Estatus</label>
                        <select class="form-control modern-input" @bind="PROSPECTODTO.sEstatus">
                            <option value="">Seleccione</option>
                            @foreach (var est in listaEstatus)
                            {
                                <option value="@est">@est</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Llamó</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sLlamo" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Ubicación</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sUbicacion" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Facebook</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sFacebook" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Nivel Académico Interés</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sNiv_AcademicoInteres" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Base</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sBase" />
                    </div>
                    <div class="col-md-6">
                        <label class="modern-label">Turno</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sTurno" />
                    </div>
                    <div class="col-12">
                        <label class="modern-label">Institución o evento</label>
                        <input class="form-control modern-input" @bind="PROSPECTODTO.sInstitu_Evento" />
                    </div>
                </div>

                @if (mostrarBtnModalG)
                {
                    <div class="text-end mt-4">
                        <button class="btn btn-azul px-4 py-2 rounded-pill" @onclick="GuardarProspecto">
                            <i class="bi bi-save"></i> Guardar
                        </button>
                    </div>
                }

                @if (mostrarBtnModalA)
                {
                    <div class="text-end mt-4">
                        <button class="btn btn-dorado px-4 py-2 rounded-pill" @onclick="GuardarProspectoEditado">
                            <i class="bi bi-save"></i> Guardar Cambios
                        </button>
                    </div>
                }
               

            </div>
        </div>
    }
    else
    {
        <div class="prospectos-kanban">
            @foreach (var columna in ColumnasKanban)
            {
                <div class="prospectos-columna"
                @ondragover:preventDefault
                     @ondragover="(e) => OnColumnaDragOver(e)"
                     @ondrop="(e) => OnColumnaDrop(e, columna.Nombre)">
                    <div class="prospectos-columna-header">
                        @columna.Nombre
                        <span class="prospectos-columna-count">@ObtenerCantidadProspectos(columna.Nombre)</span>
                    </div>
                    <div class="prospectos-cards">
                        @if (columna.Prospectos.Count == 0)
                        {
                            <div class="prospectos-alert">No hay prospectos en esta etapa.</div>
                        }
                        @foreach (var prospecto in columna.Prospectos)
                        {
                            <div class="prospectos-card prospecto-id-@prospecto.ProspectoID @(prospectosMoviendose.Contains(prospecto.ProspectoID) ? "prospecto-moviendo" : "")"
                                 draggable="true"
                                 @ondragstart="(e) => OnCardDragStart(e, prospecto.ProspectoID)">
                                <div class="prospectos-card-title">
                                    @prospecto.Nombre
                                    @if (!string.IsNullOrWhiteSpace(prospecto.Estatus))
                                    {
                                        <span class="badge badge-@prospecto.Estatus.ToLower().Replace(" ", "")">
                                            @prospecto.Estatus
                                        </span>
                                    }
                                    @if (actividadesPorProspecto.ContainsKey(prospecto.ProspectoID) &&
                                   actividadesPorProspecto[prospecto.ProspectoID].Any(a => !a.Realizado))
                                    {
                                        <span class="badge bg-warning text-dark ms-2" title="Actividades pendientes">
                                            <i class="bi bi-exclamation-circle"></i>
                                            @actividadesPorProspecto[prospecto.ProspectoID].Count(a => !a.Realizado)
                                        </span>
                                    }
                                </div>
                                <div class="prospectos-card-chips">
                                    <span class="chip chip-azul"><i class="bi bi-mortarboard"></i> @prospecto.AreaInteres</span>
                                    <span class="chip chip-localidad"><i class="bi bi-geo-alt"></i> @prospecto.Localidad</span>
                                    <span class="chip chip-cel"><i class="bi bi-telephone"></i> @prospecto.Telefono</span>
                                    @if (!string.IsNullOrWhiteSpace(prospecto.Facebook))
                                    {
                                        <span class="chip chip-facebook" title="Facebook">
                                            <i class="bi bi-facebook"></i> @prospecto.Facebook
                                        </span>
                                    }
                                </div>
                                <div class="prospectos-card-footer">
                                    <button class="btn-kanban-accion" title="Editar" @onclick="() => EditarProspecto(prospecto)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn-kanban-accion" title="Agendar cita" @onclick="() => AbrirModalAgendar(prospecto)">
                                        <i class="bi bi-calendar-plus-fill"></i>
                                    </button>
                                    <button class="btn-kanban-accion" title="Ver detalles" @onclick="() => VerDetalles(prospecto)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <button class="btn-kanban-accion" title="Ver calendario del prospecto" @onclick="() => NavegarACalendario(prospecto)">
                                        <i class="bi bi-calendar-week-fill"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="prospectos-paginacion">
                        @if (PaginaActualPorEstatus.ContainsKey(columna.Nombre) && PaginaActualPorEstatus[columna.Nombre] > 0)
                        {
                            <button class="btn-paginacion btn-paginacion-atras" @onclick="() => CambiarPagina(columna.Nombre, -1)">
                                <i class="bi bi-arrow-left-circle"></i> Atrás
                            </button>
                        }
                        @if ((todosLosProspectos.Count(p => p.Estatus == columna.Nombre) > (PaginaActualPorEstatus.ContainsKey(columna.Nombre) ? PaginaActualPorEstatus[columna.Nombre] + 1 : 1) * PAGE_SIZE))
                        {
                            <button class="btn-paginacion btn-paginacion-mas" @onclick="() => CambiarPagina(columna.Nombre, 1)">
                                Más <i class="bi bi-arrow-right-circle"></i>
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (mostrarModalAgendar)
{
    <div id="modal-agendar-actividad" class="modal-backdrop">
        <div class="modern-card sombra-azul prospecto-actividad-form"
             style="@((esComputadora ? "margin-left:360px; min-width:330px;" : ""))">
            <div class="modern-card-title">
                <i class="bi bi-calendar-event"></i> Agendar actividad para @nombreProspectoSeleccionado
                <button class="btn-closepros" @onclick="() => mostrarModalAgendar = false" title="Cerrar">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            <div class="mb-2">
                <label class="modern-label">Tipo de actividad</label>
                <select class="form-select modern-input" @bind="ACTIVIDADDTO.sTipo">
                    <option>Llamada</option>
                    <option>Correo</option>
                    <option>Visita</option>
                    <option>Recordatorio</option>
                </select>
            </div>
            <div class="mb-2">
                <label class="modern-label">Fecha y hora</label>
                <input type="datetime-local" class="form-control modern-input"
                       @bind="ACTIVIDADDTO.dFechaProgramada" />
            </div>
            <div class="mb-3">
                <label class="modern-label">Descripción o notas</label>
                <textarea class="form-control modern-input" @bind="ACTIVIDADDTO.sDescripcion" rows="3"
                          placeholder="Notas de la tarea (opcional)"></textarea>
            </div>
            <div class="text-end">
                <button class="btn btn-azul px-4 py-2 rounded-pill" @onclick="GuardarActividad">
                    <i class="bi bi-save"></i> Guardar
                </button>
            </div>

            <!-- Solo en móvil: la tabla abajo del formulario, dentro de acordeón -->
            @if (!esComputadora)
            {
                <details class="mb-2 mt-3">
                    <summary class="fw-bold text-azul mb-1" style="cursor:pointer;">
                        Ver actividades recientes
                    </summary>
                    <div class="tabla-actividades-scroll">
                        <table class="table tabla-carreras tabla-carreras-exclusiva align-middle mb-0">
                            <thead>
                                <tr>
                                    <th>Tipo</th>
                                    <th>Fecha programada</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (listaPROSPECTOSACT == null || listaPROSPECTOSACT.Count == 0)
                                {
                                    <tr>
                                        <td colspan="2" class="text-center text-muted py-4">
                                            <i class="bi bi-emoji-frown fs-3"></i>
                                            <div>No se encontró ninguna actividad</div>
                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var act in listaPROSPECTOSACT)
                                    {
                                        <tr>
                                            <td class="fw-bold">@act.Tipo</td>
                                            <td>@(act.FechaProgramada.ToString("dd/MM/yyyy HH:mm"))</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </details>
            }
        </div>

        <!-- Sidebar solo para computadora -->
        @if (esComputadora)
        {
            <div class="sidebar-modal-agendar sombra-azul">
                <div class="sidebar-header d-flex justify-content-between align-items-center mb-2">
                    <span class="fw-bold text-azul">Actividades recientes</span>
                </div>
                <div class="sidebar-content px-1">
                    <!-- OJO: Sin la clase tabla-actividades-scroll aquí -->
                    <table class="table tabla-carreras tabla-carreras-exclusiva align-middle mb-0">
                        <thead>
                            <tr>
                                <th>Tipo</th>
                                <th>Fecha programada</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (listaPROSPECTOSACT == null || listaPROSPECTOSACT.Count == 0)
                            {
                                <tr>
                                    <td colspan="2" class="text-center text-muted py-4">
                                        <i class="bi bi-emoji-frown fs-3"></i>
                                        <div>No se encontró ninguna actividad</div>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var act in listaPROSPECTOSACT)
                                {
                                    <tr>
                                        <td class="fw-bold">@act.Tipo</td>
                                        <td>@(act.FechaProgramada.ToString("dd/MM/yyyy HH:mm"))</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}

@if (mostrarDetalles)
{
    <div class="modal-backdrop">
        <div class="modern-card sombra-azul prospecto-detalle">
            <button class="btn-closepros" @onclick="() => mostrarDetalles=false">
                <i class="bi bi-x"></i>
             </button>
            <div class="modern-card-title mb-3">
                <i class="bi bi-eye"></i> Detalles de @nombreProspectoSeleccionado
            </div>
            <!-- Información del prospecto -->
            <div class="mb-3">
                <strong>Correo:</strong> @prospectoSeleccionado.Correo <br />
                <strong>Teléfono:</strong> <a href="tel:@prospectoSeleccionado.Telefono">@prospectoSeleccionado.Telefono</a> <br />
                <strong>Localidad:</strong> @prospectoSeleccionado.Localidad <br />
                <strong>Estatus:</strong> @prospectoSeleccionado.Estatus <br />
                <!-- ... otros campos relevantes ... -->
            </div>
            <!-- Lista de actividades -->
            <h5>Actividades programadas</h5>
            @if (actividadesProspecto.Any())
            {
                <ul class="list-group mb-3">
                    @foreach(var act in actividadesProspecto.Where(a => !a.Realizado))
                    {
                        <li class="list-group-item d-flex justify-content-between">
                            <span>
                                <i class="bi @(act.Tipo == "Llamada" ? "bi-telephone" : act.Tipo == "Correo" ? "bi-envelope" : act.Tipo == "Visita" ? "bi-geo" : "bi-alarm")"></i>
                                <strong>@act.Tipo:</strong> @act.Descripcion 
                                (<small>@act.FechaProgramada.ToString("g")</small>)
                            </span>
                            <button class="btn btn-success btn-sm" title="Marcar como realizado" @onclick="() => MarcarRealizado(act.ActividadID)">
                                ✔️
                            </button>
                        </li>
                    }
                </ul>
            }
            else
            {
                <div class="mb-3"><em>Sin actividades programadas.</em></div>
            }
            <h5>Historial de actividades realizadas</h5>
            @if (actividadesProspecto.Any(a => a.Realizado))
            {
                <ul class="list-group">
                    @foreach(var act in actividadesProspecto.Where(a => a.Realizado))
                    {
                        <li class="list-group-item">
                            <i class="bi bi-check-circle-fill text-success"></i>
                            <strong>@act.Tipo realizada:</strong> @act.Descripcion 
                            – <small>Realizado el @act.FechaProgramada.ToString("g")</small>
                        </li>
                    }
                </ul>
            }
            else
            {
                <div><em>Aún no hay actividades realizadas.</em></div>
            }
        </div>
    </div>
}


<!-- Modal de carga reutilizable -->
<LoadingModal Mostrar="cargando" Mensaje="'Cargando...'" />

@code {

    [Parameter]
    public string UsuarioIDSesion { get; set; } = "";

    string filtroBusqueda = "";
    string filtroEstatus = "";
    string Txtfiltro = "";
    string filtroArea = "";
    bool cargando = false;
    int? idArrastrando = null;

    List<ColumnaKanban> ColumnasKanban = new();
    List<ST_S_ProspecFiltrosDTO> todosLosProspectos = new();

    private bool mostrarFormulario = false;
    private bool mostrarBtnModalG = false;
    private bool mostrarBtnModalA = false;
    private bool mostrarModalAgendar = false;
    private bool mostrarDetalles = false;
    private bool mostrarSidebarAgendar = false;
    private bool esComputadora = true;

    private string nombreProspectoSeleccionado = "";
    private int ProspectoSeleccionadoID = 0;
    private int ProspecSeleccionadoEjecutivoID = 0;

    List<string> listaFiltroX = new() { "Nombre", "Telefono", "Estatus", "Celular", "Correo", "Localidad", "AreaInteres", "EscuelaProcedencia", "CicloEscolar", "Edad", "MedioseEntero", "Facebook", "CicloEscolar", "Niv_AcademicoInteres", "Base", "Turno", "Institu_Evento" };
    List<string> listaEstatus = new() { "Nuevo", "Contactado", "En seguimiento", "Inscrito", "No interesado" };
    List<string> listaAreas = new();

    const int PAGE_SIZE = 5;
    Dictionary<string, int> PaginaActualPorEstatus = new();

    HashSet<int> prospectosMoviendose = new();

    class ColumnaKanban
    {
        public string Nombre { get; set; }
        public List<ST_S_ProspecFiltrosDTO> Prospectos { get; set; } = new();
    }

    private ST_IUD_ProspectosDTO PROSPECTODTO = new ST_IUD_ProspectosDTO();
    private ST_IUD_ProspectoActividadDTO ACTIVIDADDTO = new ST_IUD_ProspectoActividadDTO();

    private List<ST_S_ProspectoActividadesDTO> listaPROSPECTOSACT = new(); // Lista de resultados

    private List<ST_S_ProspectoActividadesDTO> actividadesProspecto = new List<ST_S_ProspectoActividadesDTO>();
    private ST_S_ProspecFiltrosDTO prospectoSeleccionado = new();

    Dictionary<int, List<ST_S_ProspectoActividadesDTO>> actividadesPorProspecto = new();

    protected override async Task OnInitializedAsync()
    {
        UsuarioIDSesion = mySesionUsuario.UsuarioID;

        await CargarProspectos();

        var todasLasActividades = await usuarioService.ST_S_ProspectoActividadesAll();
        actividadesPorProspecto = todasLasActividades
            .GroupBy(a => a.ProspectoID)
            .ToDictionary(g => g.Key, g => g.ToList());

        ConstruirKanban();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            esComputadora = await JSRuntime.InvokeAsync<bool>("isDesktop");
            StateHasChanged();
        }
    }

    async Task CargarProspectos()
    {
        cargando = true;
        StateHasChanged();
        todosLosProspectos = await usuarioService.ST_S_ProspecFiltros("Nombre", "-", "Nombre", "-");
        listaAreas = todosLosProspectos.Select(x => x.AreaInteres).Distinct().Where(x => !string.IsNullOrWhiteSpace(x)).ToList();
        ConstruirKanban();
        cargando = false;
        StateHasChanged();
    }

    void NuevoProspecto()
    {
        mostrarFormulario = true;
        mostrarBtnModalG = true;
        mostrarBtnModalA = false;
        PROSPECTODTO = new ST_IUD_ProspectosDTO();
    }

    private async Task GuardarProspecto()
    {
        PROSPECTODTO.iTipoOperacion = 1;
        PROSPECTODTO.iProspectoID = 0;
        PROSPECTODTO.iEjecutivoID = 1;

        var loginResponse = await httpClient.PostAsJsonAsync("/api/Usuario/ST_IUD_Prospectos/", PROSPECTODTO);
        if (loginResponse.IsSuccessStatusCode)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Hecho",
                    Text = "Se guardó el prospecto correctamente",
                    Icon = SweetAlertIcon.Success
                });

            await CargarProspectos();
            mostrarFormulario = false;
        }
    }

    void EditarProspecto(ST_S_ProspecFiltrosDTO p)
    {
        mostrarFormulario = true;
        mostrarBtnModalA = true;
        mostrarBtnModalG = false;
        PROSPECTODTO = new ST_IUD_ProspectosDTO
            {
                iProspectoID = p.ProspectoID,
                iEjecutivoID = p.EjecutivoID,
                sNombre = p.Nombre,
                sTelefono = p.Telefono,
                sCelular = p.Celular,
                sCorreo = p.Correo,
                sLocalidad = p.Localidad,
                sAreaInteres = p.AreaInteres,
                sEscuelaProcedencia = p.EscuelaProcedencia,
                sCicloEscolar = p.CicloEscolar,
                iEdad = p.Edad,
                sMedioseEntero = p.MedioseEntero,
                sQuienAtendio = p.QuienAtendio,
                sEstatus = p.Estatus,
                sLlamo = p.Llamo,
                sUbicacion = p.Ubicacion,
                sFacebook = p.Facebook,
                sNiv_AcademicoInteres = p.Niv_AcademicoInteres,
                sBase = p.Base,
                sTurno = p.Turno,
                sInstitu_Evento = p.Institu_Evento
            };
    }

    private async Task GuardarProspectoEditado()
    {
        cargando = true;
        StateHasChanged();

        PROSPECTODTO.iTipoOperacion = 2;
        var response = await httpClient.PostAsJsonAsync("/api/Usuario/ST_IUD_Prospectos/", PROSPECTODTO);
        cargando = false;

        if (response.IsSuccessStatusCode)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Hecho",
                    Text = "Se actualizó el prospecto",
                    Icon = SweetAlertIcon.Success
                });
            mostrarFormulario = false;
            await CargarProspectos();
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "No se pudo actualizar",
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    void CerrarFormulario() => mostrarFormulario = false;

    void OnCardDragStart(DragEventArgs e, int id) => idArrastrando = id;
    void OnColumnaDragOver(DragEventArgs e) { }

    private async Task OnColumnaDrop(DragEventArgs e, string nuevoEstatus)
    {
        if (idArrastrando == null) return;

        var p = todosLosProspectos.FirstOrDefault(x => x.ProspectoID == idArrastrando);
        if (p != null && p.Estatus != nuevoEstatus)
        {
            prospectosMoviendose.Add(p.ProspectoID);
            var estatusAnterior = p.Estatus;

            // Paso visual con slide
            await JSRuntime.InvokeVoidAsync("slideOutCard", p.ProspectoID);
            await Task.Delay(300); // espera que se vea la animación

            // Actualiza localmente para que el usuario vea el cambio inmediato
            p.Estatus = nuevoEstatus;
            ConstruirKanban();

            // Crea DTO para guardar
            PROSPECTODTO = new ST_IUD_ProspectosDTO
                {
                    iTipoOperacion = 2,
                    iProspectoID = p.ProspectoID,
                    iEjecutivoID = p.EjecutivoID,
                    sNombre = p.Nombre,
                    sTelefono = p.Telefono,
                    sCelular = p.Celular,
                    sCorreo = p.Correo,
                    sLocalidad = p.Localidad,
                    sAreaInteres = p.AreaInteres,
                    sEscuelaProcedencia = p.EscuelaProcedencia,
                    sCicloEscolar = p.CicloEscolar,
                    iEdad = p.Edad,
                    sMedioseEntero = p.MedioseEntero,
                    sQuienAtendio = p.QuienAtendio,
                    sEstatus = p.Estatus,
                    sLlamo = p.Llamo,
                    sUbicacion = p.Ubicacion,
                    sFacebook = p.Facebook,
                    sNiv_AcademicoInteres = p.Niv_AcademicoInteres,
                    sBase = p.Base,
                    sTurno = p.Turno,
                    sInstitu_Evento = p.Institu_Evento
                };

            var r = await httpClient.PostAsJsonAsync("/api/Usuario/ST_IUD_Prospectos/", PROSPECTODTO);

            if (!r.IsSuccessStatusCode)
            {
                // Revertimos visualmente si falla
                p.Estatus = estatusAnterior;
                ConstruirKanban();

                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "No se pudo actualizar el estatus",
                        Icon = SweetAlertIcon.Error
                    });
            }

            prospectosMoviendose.Remove(p.ProspectoID);
            StateHasChanged();
        }

        idArrastrando = null;
    }

    void ConstruirKanban()
    {
        ColumnasKanban = listaEstatus.Select(status => new ColumnaKanban
            {
                Nombre = status,
                Prospectos = PaginarProspectos(status)
            }).ToList();
    }

    private async Task FiltrarProspecto(ChangeEventArgs e)
    {
        filtroBusqueda = e.Value?.ToString() ?? "";

        // Reiniciar paginación
        foreach (var estatus in listaEstatus)
        {
            PaginaActualPorEstatus[estatus] = 0;
        }

        var campoFiltro = string.IsNullOrWhiteSpace(Txtfiltro) ? "Nombre" : Txtfiltro;
        var valorFiltro = filtroBusqueda?.Trim();

        // Si no hay campo o valor, cargamos todos
        if (string.IsNullOrWhiteSpace(valorFiltro))
        {
            await CargarProspectos();
            return;
        }

        // Buscar con campo y valor
        todosLosProspectos = await usuarioService.ST_S_ProspecFiltros(
            campoFiltro,
            valorFiltro,
            "Nombre",
            "-"
        );

        ConstruirKanban();
    }

    private async Task AbrirModalAgendar(ST_S_ProspecFiltrosDTO prospecto)
    {
        // Preparar nueva actividad con valores por defecto
        ACTIVIDADDTO = new ST_IUD_ProspectoActividadDTO
            {
                iTipoOperacion = 1,              // 1 = insertar nueva
                iActividadID = 0,
                iProspectoID = prospecto.ProspectoID,
                iEjecutivoID = Convert.ToInt32(UsuarioIDSesion),                // TODO: reemplazar con ID del usuario actual logueado
                sTipo = "Llamada",               // valor inicial por defecto
                sDescripcion = "",
                dFechaProgramada = DateTime.Now.AddDays(1), // ejemplo: mañana por defecto
                bRealizado = false,
                sNombreProspecto = prospecto.Nombre
            };
        nombreProspectoSeleccionado = prospecto.Nombre ?? "";

        mostrarModalAgendar = true;

        listaPROSPECTOSACT = await usuarioService.ST_S_ProspectoActividades(2, 0, Convert.ToInt32(UsuarioIDSesion));

        

        esComputadora = await JSRuntime.InvokeAsync<bool>("isDesktop");
        mostrarSidebarAgendar = esComputadora;

        ProspectoSeleccionadoID = prospecto.ProspectoID;

        // Opcional: cargar actividades existentes de este prospecto para mostrar
        actividadesProspecto = await usuarioService.ST_S_ProspectoActividades(1, ProspectoSeleccionadoID, ACTIVIDADDTO.iEjecutivoID);
    }

    private async Task GuardarActividad()
    {

        if (string.IsNullOrWhiteSpace(ACTIVIDADDTO.sTipo) || ACTIVIDADDTO.dFechaProgramada < DateTime.Now)
        {
            await Swal.FireAsync("Validación", "Por favor selecciona un tipo de actividad válido y una fecha futura.", SweetAlertIcon.Warning);
            return;
        }

        ACTIVIDADDTO.iTipoOperacion = 1; // Asegurar que indica inserción (por si reutilizamos para editar en futuro)
                                         // Llamar API REST para guardar la actividad
        var response = await httpClient.PostAsJsonAsync("/api/Usuario/ST_IUD_ProspectoActividad", ACTIVIDADDTO);
        if (response.IsSuccessStatusCode)
        {
            // Cerrar modal y notificar éxito
            mostrarModalAgendar = false;
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Actividad programada",
                    Text = "Se ha agendado la " + ACTIVIDADDTO.sTipo.ToLower() + " correctamente.",
                    Icon = SweetAlertIcon.Success
                });

            // ✅ Recargar actividades del prospecto y actualizar el diccionario
            var nuevasActividades = await usuarioService.ST_S_ProspectoActividades(1, ACTIVIDADDTO.iProspectoID, ACTIVIDADDTO.iEjecutivoID);
            actividadesPorProspecto[ProspectoSeleccionadoID] = nuevasActividades;

            // También actualizar la lista local del modal, si está abierta
            actividadesProspecto = nuevasActividades;
        }
        else
        {
            await Swal.FireAsync("Error", "No se pudo guardar la actividad", SweetAlertIcon.Error);
        }
    }

    private async Task VerDetalles(ST_S_ProspecFiltrosDTO prospecto)
    {
        prospectoSeleccionado = prospecto;
        nombreProspectoSeleccionado = prospecto.Nombre ?? "";
        ProspectoSeleccionadoID = prospecto.ProspectoID;
        ProspecSeleccionadoEjecutivoID = prospecto.EjecutivoID;
        mostrarDetalles = true;

        actividadesProspecto = await usuarioService.ST_S_ProspectoActividades(1, ProspectoSeleccionadoID, ProspecSeleccionadoEjecutivoID);
    }

    private async Task MarcarRealizado(int actividadID)
    {
        // Buscar la actividad y marcarla
        var act = actividadesProspecto.FirstOrDefault(a => a.ActividadID == actividadID);
        if (act != null)
        {
            var updateDto = new ST_IUD_ProspectoActividadDTO
                {
                    iTipoOperacion = 2,
                    iActividadID = actividadID,
                    iProspectoID = act.ProspectoID,
                    iEjecutivoID = Convert.ToInt32(UsuarioIDSesion), // o ID real
                    sTipo = act.Tipo,
                    sDescripcion = act.Descripcion,
                    dFechaProgramada = act.FechaProgramada,
                    bRealizado = true
                };
            var resp = await httpClient.PostAsJsonAsync("/api/Usuario/ST_IUD_ProspectoActividad", updateDto);
            if (resp.IsSuccessStatusCode)
            {
                act.Realizado = true;
                // Refrescar la lista del diccionario
                var nuevasActividades = await usuarioService.ST_S_ProspectoActividades(1, updateDto.iProspectoID, updateDto.iEjecutivoID);
                actividadesPorProspecto[ProspectoSeleccionadoID] = nuevasActividades;

                actividadesProspecto = nuevasActividades;

                StateHasChanged();
            }
        }
    }

    private async Task LimpiarFiltros()
    {
        filtroBusqueda = filtroArea = filtroEstatus = Txtfiltro = "";

        // Reiniciar paginación
        foreach (var estatus in listaEstatus)
        {
            PaginaActualPorEstatus[estatus] = 0;
        }

        await CargarProspectos();
    }

    protected override void OnParametersSet()
    {
        ConstruirKanban();
    }

    void CambiarPagina(string estatus, int cambio)
    {
        if (!PaginaActualPorEstatus.ContainsKey(estatus))
            PaginaActualPorEstatus[estatus] = 0;
        PaginaActualPorEstatus[estatus] = Math.Max(0, PaginaActualPorEstatus[estatus] + cambio);
        ConstruirKanban();
    }

    List<ST_S_ProspecFiltrosDTO> PaginarProspectos(string estatus)
    {
        var q = todosLosProspectos.Where(p => p.Estatus == estatus);
        if (!string.IsNullOrWhiteSpace(filtroArea))
            q = q.Where(p => p.AreaInteres == filtroArea);
        if (!string.IsNullOrWhiteSpace(filtroEstatus) && filtroEstatus != estatus)
            return new();
        int pagina = PaginaActualPorEstatus.GetValueOrDefault(estatus, 0);
        return q.Skip(pagina * PAGE_SIZE).Take(PAGE_SIZE).ToList();
    }

    int ObtenerCantidadProspectos(string estatus) =>
        todosLosProspectos.Count(p => p.Estatus == estatus);


    void NavegarACalendario(ST_S_ProspecFiltrosDTO prospecto)
    {
        if (prospecto != null && prospecto.ProspectoID > 0)
        {
            navManager.NavigateTo($"/prospectos/calendario/{prospecto.ProspectoID}");
        }
    }


    void NavegarACalendarioE()
    {
        navManager.NavigateTo($"/prospectos/calendario/0");
        
    }


}


